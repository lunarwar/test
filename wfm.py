import pandas as pd 
import matplotlib.pyplot as plt
import datetime
import cx_Oracle
import re
import time as sl
import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait as wait
import datetime
from datetime import date, timedelta
import os
import threading

def weboperation(start,end,driver):
    driver.get("")
    driver.find_element_by_id("usernameInput").send_keys("")
    driver.find_element_by_id("password").send_keys("")
    driver.find_element_by_id("btn_submit").click()
    driver.get(
        "")
    temp = driver.find_element_by_id("template")
    temp.send_keys("wfm_query")
    sl.sleep(5)
    driver.find_element_by_xpath("//*[@id='bf_bar_BlockField1']").click()
    sl.sleep(4)
    #driver.find_element_by_class_name("sdm_list_line").click()
    extendq = driver.find_element_by_id("extendcondition_textarea")
    extendq.send_keys('"Last Update Time" >= "' + start + '" or "Create Time" >= "'+ start + '"')
    sl.sleep(2)        
    driver.find_element_by_id("checkExport").click()
    sl.sleep(120)
    driver.close()


def open_xlsx():
    _date = str(datetime.datetime.today())[:10].replace("-", "")
    path = "C:/Users/ewx510986/Downloads/MS_WFM/"
    arr = os.listdir(path)
    # return a list of all files in the starting with INCIDENT TICKET 3.0_
    for xlsx in arr:
        if xlsx[:10] == "2019-01-30":
            insrt_file = path + xlsx
            sheetname = 'dataList'
            return [sheetname,insrt_file]

def renameDownloadedSDT(filz):
    _date = str(datetime.datetime.today() - timedelta(1))[:10]
    path = "C:/Users/ewx510986/Downloads/MS_WFM/"
    os.rename(filz, path + _date + filz[46:])

def dbconnect():
    con = cx_Oracle.connect()
    return con

def data_preprocess():
    xlsxfile = open_xlsx()[1]
    df = pd.read_excel(open(xlsxfile,'rb'), sheet_name=open_xlsx()[0])
    log = open('WFM.txt','a') 
    con = dbconnect()
    corsor = con.cursor()
    nas = df.columns.values  # excel sheet headers
    viz = df[[  
        nas[0],
        nas[1],
        nas[2],
        nas[3],
        nas[4],
        nas[5],
        nas[6],
        nas[7],
        nas[8],
        nas[9],
        nas[10],
        nas[11],
        nas[12],
        nas[13],
        nas[14],
        nas[15],
        nas[16],
        nas[17],
        nas[18],
        nas[19],
        nas[20],
        nas[21],
        nas[22],
        nas[23],
        nas[24],
        nas[25],
        nas[26],
        nas[27],
        nas[28],
        nas[29],
        nas[30],
        nas[31],
        nas[32],
        nas[33],
        nas[34],
        nas[35],
        nas[36],
        nas[37],
        nas[38],
        nas[39],
        nas[40],
        nas[41],
        nas[42],
        nas[43],
        nas[44],
        nas[45],
        nas[46],
        nas[47],
        nas[48],
        nas[49],
        nas[50],
        nas[51],
        nas[52],
        nas[53],
        nas[54],
        nas[55],
        nas[56],
        nas[57],
        nas[58],
        nas[59],
        nas[60],
        nas[61],
        nas[62],
        nas[63],
        nas[64],
        nas[65],
        nas[66],
        nas[67],
        nas[68],
        nas[69],
        nas[70],
        nas[71],
        nas[72],
        nas[73],
        nas[74],
        nas[75],
        nas[76],
        nas[77],
        nas[78],
        nas[79],
        nas[80],
        nas[81],
        nas[82],
        nas[83],
        nas[84],
        nas[85],
        nas[86],
        nas[87],
        nas[88],
        nas[89],
        nas[90],
        nas[91],
        nas[92],
        nas[93],
        nas[94],
        nas[95],
        nas[96],
        nas[97],
        nas[98],
        nas[99],
        nas[100],
        nas[101],
        nas[102],
        nas[103],
        nas[104],
        nas[105],
        nas[106],
        nas[107],
        nas[108],
        nas[109],
        nas[110],
        nas[111],
        nas[112],
        nas[113],
        nas[114],
        nas[115],
        nas[116],
        nas[117],
        nas[118],
        nas[119],
        nas[120],
        nas[121],
        nas[122],
        nas[123],
        nas[124],
        nas[125],
        nas[126],
        nas[127],
        nas[128],
        nas[129],
        nas[130],
        nas[131],
        nas[132]

            ]]
    query = """INSERT INTO MS_WORK_ORDER(
                TASK_ID,
                OPERATE_TYPE,
                TASK_TYPE,
                TITLE,
                TASK_STATUS,
                FM_OFFICE,
                ASSIGN_TO_FME,
                SITE_ID,
                PROJECT_,
                CREATE_TIME,
                CONFIRM_TIME,
                SLA_STATUS,
                ACCEPT_OPERATOR,
                ACCEPT_TIME,
                ADD_RESOURCE_REASON,
                ALARMID,
                ARRIVE_OPERATOR,
                ARRIVE_TIME,
                ASSIGN_TO_FME_NAME,
                AUTOSCHEDULABLE,
                BASELINE_DURATION,
                BASELINE_SKILLS,
                CANCEL_DES,
                CANCEL_OPERATOR,
                CANCEL_REASON,
                CANCEL_TIME,
                CELL_NAME,
                CLUSTER_ID_,
                CM_ALARM_NAME,
                FAULT_FIRST_OCCUR_TIME,
                FAULT_LEVEL,
                COMPLETE_ATTACHMENT,
                COMPLETE_DESCRIPTION,
                COMPLETE_OPERATOR,
                COMPLETE_TIME,
                CONFIRM_DESCRIPTION,
                CONFIRM_OPERATOR,
                CONFIRM_REASON,
                CREATE_OPERATOR,
                DEPART_OPERATOR,
                DEPART_TIME,
                DESCRIPTION_,
                DEVICE_ID,
                DISPATCH_OPERATOR,
                DISPATCH_TIME,
                DRAFT_ID,
                EARLIEST_START_TIME,
                ESTIMATE_ARRIVE_TIME,
                ESTIMATE_COMPLETE_TIME,
                ESTIMATE_START_TIME,
                FAULT_CLEAR_TIME,
                FAULT_LAST_OCCUR_TIME,
                FAULT_REASON_DESCRIPTION,
                FAULT_REASON_TYPE,
                FAULT_SOLUTION__DESCRIPTION,
                FAULT_SOLUTION_TYPE,
                IS_AUTO_CLOSE,
                OPERATE_SOURCE,
                OUT_IN,
                PARENT_TICKETID,
                PRE_COMPLETE_TIME,
                PRE_START_TIME,
                PRE_TO_FME,
                PROBABLE_CAUSE,
                RCA,
                REACH_STATUS,
                READ_STATUS,
                REGION,
                REJECT_DES,
                REJECT_OPERATOR,
                REJECT_REASON,
                REJECT_TIME,
                REJECT_TO,
                REQUIRED_FME,
                SAME_RIGGER,
                SCHEDULE_OPERATOR,
                SCHEDULE_STATUS,
                SCHEDULE_TIME,
                SITE_ID_NAME,
                SITE_POWER_TYPE,
                SITE_PRIORITY,
                SITE_PRIORITY_ID,
                SLA_HOUR,
                SOLUTION,
                SUSPEND_DES,
                SUSPEND_OPERATOR,
                SUSPEND_REASON,
                SUSPEND_STATE,
                SUSPEND_TIME,
                TASK_CATEGORY,
                TASK_SEQ,
                TASK_SUBCATEGORY,
                TECHNOLOGY,
                TEST_DETAIL,
                THIRDPARTYINTERGRATEDTICKETID,
                TICKET_ID,
                TICKET_SOURCE,
                UNSCHEDULE_DESCRIPTION,
                UNSCHEDULE_OPERATOR,
                UNSCHEDULE_REASON,
                UNSCHEDULE_TIME,
                ISSUE_OWNER,
                FAULT_TYPE,
                FAULT_CATEGORY,
                FAULT_SUBCATEGORY,
                ISDP_PROJECT,
                FAULT_COMBINED_SDM,
                HIGH_RISK,
                EHS_INITIAL_HIGHRISK,
                SYNC_,
                IS_HIGH_RISK,
                IVR_CALL_LEVEL,
                IVR_ACKNOWLEDGE_CALL_STATUS,
                ISSITEDOWN,
                ISSUELASTOCCURTIME,
                AFFECTED_SITE_QTY,
                RCABUCKET,
                ALARM_INFORMATION,
                IVR_CALLED_TIMESSLA_OVERDUE,
                TESTSLATIME,
                IVR_CALLED_TIMESWO_DISPATCHED,
                IVR_CALLED_TIMESRTO_ESCALATED,
                IVR_CALLED_ABNORMAL_TIMESSLA_O,
                IVR_CALLED_ABNORMAL_TIMESWO_DI,
                IVR_CALLED_ABNORMAL_TIMESRTO_E,
                FAULT_RECOVERY_TIME,
                IVR_CALL_FEEDBACK,
                LAST_UPDATE_TIME,
                FEEDBACK_TIME,
                FEEDBACK_OPERATOR,
                DIESEL_LEVEL,
                DG_RUN_HOUR,
                DIESEL_LEVEL_VALUE,
                LAST_UPDATE_TIME_QU
                    ) VALUES """
    for i in range(0, len(viz)):
        insert_date =  str(datetime.datetime.today())[:19]

        data = (
        str(viz[nas[0]][i]).replace("'",""),
        str(viz[nas[1]][i]).replace("'",""),
        str(viz[nas[2]][i]).replace("'",""),
        str(viz[nas[3]][i]).replace("'",""),
        str(viz[nas[4]][i]).replace("'",""),
        str(viz[nas[5]][i]).replace("'",""),
        str(viz[nas[6]][i]).replace("'",""),
        str(viz[nas[7]][i]).replace("'",""),
        str(viz[nas[8]][i]).replace("'",""),
        str(viz[nas[9]][i]).replace("'",""),
        str(viz[nas[10]][i]).replace("'",""),
        str(viz[nas[11]][i]).replace("'",""),
        str(viz[nas[12]][i]).replace("'",""),
        str(viz[nas[13]][i]).replace("'",""),
        str(viz[nas[14]][i]).replace("'",""),
        str(viz[nas[15]][i]).replace("'",""),
        str(viz[nas[16]][i]).replace("'",""),
        str(viz[nas[17]][i]).replace("'",""),
        str(viz[nas[18]][i]).replace("'",""),
        str(viz[nas[19]][i]).replace("'",""),
        str(viz[nas[20]][i]).replace("'",""),
        str(viz[nas[21]][i]).replace("'",""),
        str(viz[nas[22]][i]).replace("'",""),
        str(viz[nas[23]][i]).replace("'",""),
        str(viz[nas[24]][i]).replace("'",""),
        str(viz[nas[25]][i]).replace("'",""),
        str(viz[nas[26]][i]).replace("'",""),
        str(viz[nas[27]][i]).replace("'",""),
        str(viz[nas[28]][i]).replace("'",""),
        str(viz[nas[29]][i]).replace("'",""),
        str(viz[nas[30]][i]).replace("'",""),
        str(viz[nas[31]][i]).replace("'",""),
        str(viz[nas[32]][i]).replace("'",""),
        str(viz[nas[33]][i]).replace("'",""),
        str(viz[nas[34]][i]).replace("'",""),
        str(viz[nas[35]][i]).replace("'",""),
        str(viz[nas[36]][i]).replace("'",""),
        str(viz[nas[37]][i]).replace("'",""),
        str(viz[nas[38]][i]).replace("'",""),
        str(viz[nas[39]][i]).replace("'",""),
        str(viz[nas[40]][i]).replace("'",""),
        str(viz[nas[41]][i]).replace("'",""),
        str(viz[nas[42]][i]).replace("'",""),
        str(viz[nas[43]][i]).replace("'",""),
        str(viz[nas[44]][i]).replace("'",""),
        str(viz[nas[45]][i]).replace("'",""),
        str(viz[nas[46]][i]).replace("'",""),
        str(viz[nas[47]][i]).replace("'",""),
        str(viz[nas[48]][i]).replace("'",""),
        str(viz[nas[49]][i]).replace("'",""),
        str(viz[nas[50]][i]).replace("'",""),
        str(viz[nas[51]][i]).replace("'",""),
        str(viz[nas[52]][i]).replace("'",""),
        str(viz[nas[53]][i]).replace("'",""),
        str(viz[nas[54]][i]).replace("'",""),
        str(viz[nas[55]][i]).replace("'",""),
        str(viz[nas[56]][i]).replace("'",""),
        str(viz[nas[57]][i]).replace("'",""),
        str(viz[nas[58]][i]).replace("'",""),
        str(viz[nas[59]][i]).replace("'",""),
        str(viz[nas[60]][i]).replace("'",""),
        str(viz[nas[61]][i]).replace("'",""),
        str(viz[nas[62]][i]).replace("'",""),
        str(viz[nas[63]][i]).replace("'",""),
        str(viz[nas[64]][i]).replace("'",""),
        str(viz[nas[65]][i]).replace("'",""),
        str(viz[nas[66]][i]).replace("'",""),
        str(viz[nas[67]][i]).replace("'",""),
        str(viz[nas[68]][i]).replace("'",""),
        str(viz[nas[69]][i]).replace("'",""),
        str(viz[nas[70]][i]).replace("'",""),
        str(viz[nas[71]][i]).replace("'",""),
        str(viz[nas[72]][i]).replace("'",""),
        str(viz[nas[73]][i]).replace("'",""),
        str(viz[nas[74]][i]).replace("'",""),
        str(viz[nas[75]][i]).replace("'",""),
        str(viz[nas[76]][i]).replace("'",""),
        str(viz[nas[77]][i]).replace("'",""),
        str(viz[nas[78]][i]).replace("'",""),
        str(viz[nas[79]][i]).replace("'",""),
        str(viz[nas[80]][i]).replace("'",""),
        str(viz[nas[81]][i]).replace("'",""),
        str(viz[nas[82]][i]).replace("'",""),
        str(viz[nas[83]][i]).replace("'",""),
        str(viz[nas[84]][i]).replace("'",""),
        str(viz[nas[85]][i]).replace("'",""),
        str(viz[nas[86]][i]).replace("'",""),
        str(viz[nas[87]][i]).replace("'",""),
        str(viz[nas[88]][i]).replace("'",""),
        str(viz[nas[89]][i]).replace("'",""),
        str(viz[nas[90]][i]).replace("'",""),
        str(viz[nas[91]][i]).replace("'",""),
        str(viz[nas[92]][i]).replace("'",""),
        str(viz[nas[93]][i]).replace("'",""),
        str(viz[nas[94]][i]).replace("'",""),
        str(viz[nas[95]][i]).replace("'",""),
        str(viz[nas[96]][i]).replace("'",""),
        str(viz[nas[97]][i]).replace("'",""),
        str(viz[nas[98]][i]).replace("'",""),
        str(viz[nas[99]][i]).replace("'",""),
        str(viz[nas[100]][i]).replace("'",""),
        str(viz[nas[101]][i]).replace("'",""),
        str(viz[nas[102]][i]).replace("'",""),
        str(viz[nas[103]][i]).replace("'",""),
        str(viz[nas[104]][i]).replace("'",""),
        str(viz[nas[105]][i]).replace("'",""),
        str(viz[nas[106]][i]).replace("'",""),
        str(viz[nas[107]][i]).replace("'",""),
        str(viz[nas[108]][i]).replace("'",""),
        str(viz[nas[109]][i]).replace("'",""),
        str(viz[nas[110]][i]).replace("'",""),
        str(viz[nas[111]][i]).replace("'",""),
        str(viz[nas[112]][i]).replace("'",""),
        str(viz[nas[113]][i]).replace("'",""),
        str(viz[nas[114]][i]).replace("'",""),
        str(viz[nas[115]][i]).replace("'",""),
        str(viz[nas[116]][i]).replace("'",""),
        str(viz[nas[117]][i]).replace("'",""),
        str(viz[nas[118]][i]).replace("'",""),
        str(viz[nas[119]][i]).replace("'",""),
        str(viz[nas[120]][i]).replace("'",""),
        str(viz[nas[121]][i]).replace("'",""),
        str(viz[nas[122]][i]).replace("'",""),
        str(viz[nas[123]][i]).replace("'",""),
        str(viz[nas[124]][i]).replace("'",""),
        str(viz[nas[125]][i]).replace("'",""),
        str(viz[nas[126]][i]).replace("'",""),
        str(viz[nas[127]][i]).replace("'",""),
        str(viz[nas[128]][i]).replace("'",""),
        str(viz[nas[129]][i]).replace("'",""),
        str(viz[nas[130]][i]).replace("'",""),
        str(viz[nas[131]][i]).replace("'",""),
        str(viz[nas[132]][i]).replace("'",""),
        insert_date
            )

        try: 
            corsor.execute(query + str(data).replace("nan","''").replace('"',"").replace("\\"," ").replace("  "," "))
            print("insert successfully")
        except Exception as e:
            print(e)
            log.write(str(e) + '\n')
            log.write(str(e) + '\n')
            log.write(str(viz["OrderId"][i]) + '\n')
            log.write(str(datetime.datetime.today())[:18] + '\n') 
            Performace_update(data,corsor)
            

    corsor.close()
    con.commit() 
    print("task completed")
    log.write(str(datetime.datetime.today())[:18] + '\n')
    log.close()
    renameDownloadedSDT(xlsxfile)

def Performace_update(dataset,corsor):
    query = [
       "TASK_ID",
        "OPERATE_TYPE",
        "TASK_TYPE",
        "TITLE",
        "TASK_STATUS",
        "FM_OFFICE",
        "ASSIGN_TO_FME",
        "SITE_ID",
        "PROJECT_",
        "CREATE_TIME",
        "CONFIRM_TIME",
        "SLA_STATUS",
        "ACCEPT_OPERATOR",
        "ACCEPT_TIME",
        "ADD_RESOURCE_REASON",
        "ALARMID",
        "ARRIVE_OPERATOR",
        "ARRIVE_TIME",
        "ASSIGN_TO_FME_NAME",
        "AUTOSCHEDULABLE",
        "BASELINE_DURATION",
        "BASELINE_SKILLS",
        "CANCEL_DES",
        "CANCEL_OPERATOR",
        "CANCEL_REASON",
        "CANCEL_TIME",
        "CELL_NAME",
        "CLUSTER_ID_",
        "CM_ALARM_NAME",
        "FAULT_FIRST_OCCUR_TIME",
        "FAULT_LEVEL",
        "COMPLETE_ATTACHMENT",
        "COMPLETE_DESCRIPTION",
        "COMPLETE_OPERATOR",
        "COMPLETE_TIME",
        "CONFIRM_DESCRIPTION",
        "CONFIRM_OPERATOR",
        "CONFIRM_REASON",
        "CREATE_OPERATOR",
        "DEPART_OPERATOR",
        "DEPART_TIME",
        "DESCRIPTION_",
        "DEVICE_ID",
        "DISPATCH_OPERATOR",
        "DISPATCH_TIME",
        "DRAFT_ID",
        "EARLIEST_START_TIME",
        "ESTIMATE_ARRIVE_TIME",
        "ESTIMATE_COMPLETE_TIME",
        "ESTIMATE_START_TIME",
        "FAULT_CLEAR_TIME",
        "FAULT_LAST_OCCUR_TIME",
        "FAULT_REASON_DESCRIPTION",
        "FAULT_REASON_TYPE",
        "FAULT_SOLUTION__DESCRIPTION",
        "FAULT_SOLUTION_TYPE",
        "IS_AUTO_CLOSE",
        "OPERATE_SOURCE",
        "OUT_IN",
        "PARENT_TICKETID",
        "PRE_COMPLETE_TIME",
        "PRE_START_TIME",
        "PRE_TO_FME",
        "PROBABLE_CAUSE",
        "RCA",
        "REACH_STATUS",
        "READ_STATUS",
        "REGION",
        "REJECT_DES",
        "REJECT_OPERATOR",
        "REJECT_REASON",
        "REJECT_TIME",
        "REJECT_TO",
        "REQUIRED_FME",
        "SAME_RIGGER",
        "SCHEDULE_OPERATOR",
        "SCHEDULE_STATUS",
        "SCHEDULE_TIME",
        "SITE_ID_NAME",
        "SITE_POWER_TYPE",
        "SITE_PRIORITY",
        "SITE_PRIORITY_ID",
        "SLA_HOUR",
        "SOLUTION",
        "SUSPEND_DES",
        "SUSPEND_OPERATOR",
        "SUSPEND_REASON",
        "SUSPEND_STATE",
        "SUSPEND_TIME",
        "TASK_CATEGORY",
        "TASK_SEQ",
        "TASK_SUBCATEGORY",
        "TECHNOLOGY",
        "TEST_DETAIL",
        "THIRDPARTYINTERGRATEDTICKETID",
        "TICKET_ID",
        "TICKET_SOURCE",
        "UNSCHEDULE_DESCRIPTION",
        "UNSCHEDULE_OPERATOR",
        "UNSCHEDULE_REASON",
        "UNSCHEDULE_TIME",
        "ISSUE_OWNER",
        "FAULT_TYPE",
        "FAULT_CATEGORY",
        "FAULT_SUBCATEGORY",
        "ISDP_PROJECT",
        "FAULT_COMBINED_SDM",
        "HIGH_RISK",
        "EHS_INITIAL_HIGHRISK",
        "SYNC_",
        "IS_HIGH_RISK",
        "IVR_CALL_LEVEL",
        "IVR_ACKNOWLEDGE_CALL_STATUS",
        "ISSITEDOWN",
        "ISSUELASTOCCURTIME",
        "AFFECTED_SITE_QTY",
        "RCABUCKET",
        "ALARM_INFORMATION",
        "IVR_CALLED_TIMESSLA_OVERDUE",
        "TESTSLATIME",
        "IVR_CALLED_TIMESWO_DISPATCHED",
        "IVR_CALLED_TIMESRTO_ESCALATED",
        "IVR_CALLED_ABNORMAL_TIMESSLA_O",
        "IVR_CALLED_ABNORMAL_TIMESWO_DI",
        "IVR_CALLED_ABNORMAL_TIMESRTO_E",
        "FAULT_RECOVERY_TIME",
        "IVR_CALL_FEEDBACK",
        "LAST_UPDATE_TIME",
        "FEEDBACK_TIME",
        "FEEDBACK_OPERATOR",
        "DIESEL_LEVEL",
        "DG_RUN_HOUR",
        "DIESEL_LEVEL_VALUE",
        "LAST_UPDATE_TIME_QU"
    ]
    for i,j in enumerate(query):
        strg = "UPDATE MS_WORK_ORDER SET " + str(j) + " = '" + str(dataset[i]).replace("nan","''").replace('"',"").replace("\\"," ").replace("  "," ") + "'" + " where TASK_ID = '" + str(dataset[0]) + "'"
        try:
            corsor.execute(strg)
        except:
            continue
    print("updated")


def main(date1,date2):
    chrome_options = webdriver.ChromeOptions()
    prefs = {'download.default_directory' : 'C:/Users/ewx510986/Downloads/MS_WFM'}
    chrome_options.add_experimental_option('prefs', prefs)
    driver = webdriver.Chrome(chrome_options=chrome_options)
    weboperation(date1,date2,driver)
    return


if __name__ =='__main__':
    log = open("C:\\Users\\ewx510986\\Desktop\\machine learning\\MS_WFM.txt","w")
    _date = str(datetime.datetime.now() - datetime.timedelta(hours=8))[:19]
    start = _date
    end  =  _date
    log.write(str(datetime.datetime.now()) + '\n') 
    main(start,end)
    data_preprocess()
